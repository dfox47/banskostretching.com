<?phpnamespace MonoGateway;class Api {    private $token;    protected $order;    const API_URL = "https://api.monobank.ua/api/merchant";    public function __construct($token) {        $this->token = $token;    }    protected function _request($endpoint, $method, $post_fields = null, $invoice_id = null) {        $url = self::API_URL . $endpoint;        if ($endpoint == "/invoice/status" && $invoice_id) {            $url .= "?invoiceId=$invoice_id";        }        $headers = array(            'Content-type' => 'application/json',            'X-Token' => $this->token,            'X-Cms' => 'Wordpress/WooCommerce',            'X-Cms-Version' => get_bloginfo('version') . '/' . WC()->version . '/' . '3.2.1',        );        $args = array(            'method' => $method,            'headers' => $headers,        );        if (!is_null($post_fields)) {            $args['body'] = json_encode(apply_filters('convertkit-call-args', $post_fields));        }        $response = wp_safe_remote_post($url, $args);        if ($response === false) {            throw new \Exception("Connection error");        }        return json_decode($response['body'], true);    }    public function setOrder($order) {        $this->order = $order;    }    public function create($paymentType, $ccy) {        $body = [            'amount' => $this->order->get_amount(),            'ccy' => $ccy,            'merchantPaymInfo' => [                'reference' => (string)$this->order->get_id(),                'destination' => $this->order->get_destination(),                'basketOrder' => $this->order->get_basket_order(),                'customerEmails' => $this->order->get_customer_emails(),            ],            'redirectUrl' => $this->order->get_redirect_url(),            'webHookUrl' => $this->order->get_webhook_url(),            'paymentType' => $paymentType        ];        return $this->_request("/invoice/create", 'POST', $body);    }    public function getStatus($invoice_id) {        $response = $this->_request("/invoice/status", 'GET', null, $invoice_id);        error_log(json_encode($response));        return $response;    }    public function cancel($cancel_data) {        return $this->_request("/invoice/cancel", 'POST', $cancel_data);    }    public function finalizeHold($holdData) {        $response = $this->_request("/invoice/finalize", 'POST', $holdData);        error_log(json_encode($response));        return $response;    }    public function getPubkey() {        $response = $this->_request("/pubkey", 'GET');        error_log(json_encode($response));        return $response;    }}